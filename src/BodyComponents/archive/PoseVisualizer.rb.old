#!/usr/bin/ruby
#

###
#
# File: PoseVisualizer.rb
#
######


###
#
# (c) 2009-2011, Copyright, Bjoern Rennhak, The University of Tokyo
#
# @file       PoseVisualizer.rb
# @author     Bjoern Rennhak
# @copyright  See COPYRIGHT file for details.
#
#######


# Standard includes
require 'rubygems'
require 'opengl'
require 'RMagick'
require 'rvg/rvg'

# Custom includes

# Change Namespace
include Magick
include Gl,Glu,Glut

# Set DPI
Magick::RVG.dpi = 72

###
#
# @class   PoseVisualizer
# @author  Bjoern Rennhak
# @brief   This class helps with generating images of 3D data (poses)
# @details {}
#
#######
class PoseVisualizer # {{{
  def initialize kmeans = nil  # {{{
    @kmeans = kmeans
    @fov    = 90

    init
    resize( 800, 600 )
    drawgl( 800, 600 )

  end # of initialize }}}

  # Initialise OpenGL state for 3D rendering.
  def init
    GL.ShadeModel(GL::SMOOTH)
    GL.Enable(GL::DEPTH_TEST)
    GL.DepthFunc(GL::LEQUAL)
    GL.ClearColor(0.0, 0.0, 0.0, 0.0)
    GL.Hint(GL::PERSPECTIVE_CORRECTION_HINT, GL::NICEST)
    true
  end

  # Resize OpenGL viewport.
  def resize( width, height )
    GL.Viewport(0, 0, width, height)

    GL.MatrixMode(GL::PROJECTION)
    GL.LoadIdentity()
    GLU.Perspective(@fov, width.to_f() / height.to_f(), 0.1, 1024.0)

    GL.MatrixMode(GL::MODELVIEW)
    GL.LoadIdentity()
  end

  # Render OpenGL scene.
  def drawgl( width, height )
    GL.Clear(GL::COLOR_BUFFER_BIT | GL::DEPTH_BUFFER_BIT)
    GL.LoadIdentity()

    # Scene view translation
    GL.Translate(0.0, 0.0, -1.0)
    GL.Rotate(0.0, 0.0, 0.0, 0.0)

    # Scene Rendering Code
    GL.Begin(GL::TRIANGLES)
      GL.Color3f(0, 0, 1)
      GL.Vertex2f(-1, -1)
      GL.Color3f(0, 1, 0)
      GL.Vertex2f(1, 1)
      GL.Color3f(1, 0, 0)
      GL.Vertex2f(1, -1)
    GL.End()

    GL.Flush()
    

 glutInit
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
glutInitWindowSize(500, 500)
glutInitWindowPosition(100, 100)
glutCreateWindow("red 3D lighted cube")
glutDisplayFunc(display)
#glutKeyboardFunc(keyboard)
myinit
glutMainLoop()   



    # http://ruby-opengl.rubyforge.org/svn/trunk/doc/tutorial.txt
    # GL.TexImage2D( GL::TEXTURE_2D, 0, 3, 150, 150, 0, GL::RGB, GL::BYTE, @image)
    target          = [ GL::TEXTURE_1D, GL::TEXTURE_2D, GL::TEXTURE_3D ]
    level_of_detail = 0 # mipmap level
    format          = [ GL::RED, GL::GREEN, GL::BLUE, GL::ALPHA, GL::RGB, GL::BGR, GL::RGBA, GL::BGRA, GL::LUMINANCE, GL::LUMINANCE_ALPHA ] # components per pixel
    type            = [ GL::UNSIGNED_BYTE ] # component type
    
    #pixels          = Gl.glGetTexImage( target[1], level_of_detail, format[4], type[0] )
    #image           = Magick::Image.new( width, height )
    #image.import_pixels( 0, 0, width, height, "RGB", pixels )

    # packed data as string
    pixels          = glGetTexImage( target[1], level_of_detail, GL::RGB, GL::FLOAT )

    # now convert it to ruby array
    texture = pixels.unpack("f*")

    p texture

  end


$light_diffuse = [1.0, 0.0, 0.0, 1.0]
$light_position = [1.0, 1.0, 1.0, 0.0]
$n = [  
        [-1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 0.0, 0.0],
        [0.0, -1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, -1.0] ]
$faces = [
        [0, 1, 2, 3], [3, 2, 6, 7], [7, 6, 5, 4],
        [4, 5, 1, 0], [5, 6, 2, 1], [7, 4, 0, 3] ]
$v = 0

def drawBox
        for i in (0..5)
                glBegin(GL_QUADS)
                glNormal(*($n[i]))
                glVertex($v[$faces[i][0]])
                glVertex($v[$faces[i][1]])
                glVertex($v[$faces[i][2]])
                glVertex($v[$faces[i][3]])
                glEnd()
        end
end

display = Proc.new do
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        drawBox
        glutSwapBuffers
end

def myinit
$v = [[-1, -1,1],[-1, -1,-1], [-1,1,-1], [-1,1,1], [1, -1,1],
        [1, -1,-1], [1, 1,-1], [1,1,1]]

        glLight(GL_LIGHT0, GL_DIFFUSE, $light_diffuse)
        glLight(GL_LIGHT0, GL_POSITION, $light_position)
        glEnable(GL_LIGHT0)
        glEnable(GL_LIGHTING)

        glEnable(GL_DEPTH_TEST)

        glMatrixMode(GL_PROJECTION)
        gluPerspective(40.0, 1.0, 1.0,  10.0)
        glMatrixMode(GL_MODELVIEW)
        gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)

        glTranslate(0.0, 0.0, -1.0)
        glRotate(60, 1.0, 0.0, 0.0)
        glRotate(-20, 0.0, 0.0, 1.0)
end




  def draw 
    #img = Image.new(800, 600) do
    #  self.background_color = 'white'
    #  self.border_color = "black"
    #end

    #img.write( filename )

#    rvg = Magick::RVG.new(800, 600).viewbox(0,0,800,600) do |canvas|
#      canvas.background_fill = 'white'
#
#      left_foot   = RVG::Group.new { |c| c.line( 0, 0, 0, 200 ).styles(:stroke_width=>5, :stroke=>'black') }
#      right_foot  = RVG::Group.new { |c| c.line( 0, 0, 0, 200 ).styles(:stroke_width=>5, :stroke=>'black') }
#
#
#      canvas.use(left_foot).translate(100, 100).rotate(-10)
#      canvas.use(right_foot).translate(200, 100).rotate(10)
#
#    end
#
#
#    img         = rvg.draw
#    img.format  = "png"
#
#
#    #send_data rvg.draw.to_blob,
#    #:filename => "/tmp/woohoo.png",
#    #:disposition => 'inline',
#    #:quality => 90,
#    #:type => 'image/png'
#    
#    rvg.draw.write( "/tmp/foobar.png" )
#
  end



end # of class Plotter # }}}

# = Direct invocation
if __FILE__ == $0 # {{{
  pv = PoseVisualizer.new

end # if __FILE__ == $0 # }}}

